#![feature(test)]
extern crate test;
use aoc_{YYYY}::*;

const DAY: u8 = {N};

#[tracing::instrument]
fn main() {
    tracing_subscriber::fmt::init();
    let input = &read_input(DAY);
    println!(
        "Day {:0>2}: Part 1 answer = {}, Part 2 answer = {}",
        DAY, solve_p1(input), solve_p2(input)
    );
}

pub fn solve_p1(input: &str) -> usize {
    todo!("Solve part 1 given: {}", input)
}

pub fn solve_p2(input: &str) -> usize {
    input.len()
}

#[cfg(test)]
mod day{NN}_tests {
    use super::*;
    
    const SAMPLE: &str = include_str!("../../inputs/day{NN}/sample.txt");

    #[test_log::test]
    fn p1_sample() {
        assert_eq!(solve_p1(SAMPLE), 0)
    }

    #[test_log::test]
    #[ignore]
    fn p1_input() {
        let input = &read_input(DAY);
        assert_eq!(solve_p1(input), 0)
    }

    #[test_log::test]
    #[ignore]
    fn p2_sample() {
        assert_eq!(solve_p2(SAMPLE), 0)
    }

    #[test_log::test]
    #[ignore]
    fn p2_input() {
        let input = &read_input(DAY);
        assert_eq!(solve_p2(input), 0)
    }


}

#[cfg(test)]
mod day{NN}_benchmarks {
    use super::*;
    use test::Bencher;

    #[bench]
    #[ignore]
    fn bench_p1(b: &mut Bencher) {
        let input = &read_input(DAY);
        b.iter(|| solve_p1(input))
    }

    #[bench]
    #[ignore]
    fn bench_p2(b: &mut Bencher) {
        let input = &read_input(DAY);
        b.iter(|| solve_p2(input))
    }
}
